generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("MONGODB_URL")
}

model User {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  email         String    @unique
  password      String
  firstName     String
  lastName      String
  role          Role      @default(STUDENT)
  avatar        String?
  bio           String?   // For profile page
  phone         String?   // Added for Nepali context
  address       String?   // Added for Nepali context
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Relations
  student       Student?
  teacher       Teacher?
  parent        Parent?
  posts         Post[]
  comments      Comment[]
  submissions   AssignmentSubmission[]
  grades        Grade[]
  achievements  Achievement[]

}

model Student {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  userId        String    @unique @db.ObjectId
  user          User      @relation(fields: [userId], references: [id])
  grade         Int?      // Optional for flexibility
  section       String?   // Optional
  rollNumber    String    @unique
  address       String?   // Moved from User for student-specific
  phoneNumber   String?   // Renamed for consistency
  parentId      String?   @db.ObjectId
  parent        Parent?   @relation(fields: [parentId], references: [id])
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Relations
  enrollments   Enrollment[]
  attendances   Attendance[]  // Fixed: removed redundant 'attendance'
}

model Teacher {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  userId        String    @unique @db.ObjectId
  user          User      @relation(fields: [userId], references: [id])
  qualification String
  experience    Int
  address       String?   // Moved from User for teacher-specific
  phoneNumber   String?   // Renamed for consistency
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Relations
  teacherSubjects TeacherSubject[]
  courses         Course[]
  assignments     Assignment[]    @relation("AssignmentCreator")
  attendances     Attendance[]    @relation("TeacherAttendance") // Added relation
}

model Parent {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  userId        String    @unique @db.ObjectId
  user          User      @relation(fields: [userId], references: [id])
  phone         String?   // Kept optional
  address       String?   // Kept optional
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Relations
  students      Student[]
}

model Course {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  name          String
  description   String
  subjectId     String    @db.ObjectId
  subject       Subject   @relation(fields: [subjectId], references: [id])
  teacherId     String    @db.ObjectId
  teacher       Teacher   @relation(fields: [teacherId], references: [id])
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Relations
  enrollments   Enrollment[]
  assignments   Assignment[]
}

model Subject {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  name          String
  code          String    @unique
  description   String
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Relations
  grades        Grade[]
  teacherSubjects TeacherSubject[]
  courses       Course[]
}

model Enrollment {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  studentId     String    @db.ObjectId
  student       Student   @relation(fields: [studentId], references: [id])
  courseId      String    @db.ObjectId
  course        Course    @relation(fields: [courseId], references: [id])
  enrolledAt    DateTime  @default(now())
  status        EnrollmentStatus @default(ACTIVE)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model Assignment {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  title         String
  description   String?
  dueDate       DateTime
  status        AssignmentStatus @default(PENDING)

  courseId      String    @db.ObjectId
  course        Course    @relation(fields: [courseId], references: [id])
  teacherId     String    @db.ObjectId
  teacher       Teacher   @relation("AssignmentCreator", fields: [teacherId], references: [id])
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Relations
  submissions   AssignmentSubmission[]
}

model Grade {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  value         Float
  comment       String?
  userId        String    @db.ObjectId
  user          User      @relation(fields: [userId], references: [id])
  subjectId     String    @db.ObjectId
  subject       Subject   @relation(fields: [subjectId], references: [id])
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model Attendance {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  date          DateTime
  status        AttendanceStatus
  studentId     String    @db.ObjectId
  student       Student   @relation(fields: [studentId], references: [id])
  teacherId     String    @db.ObjectId  // Fixed: Added proper relation
  teacher       Teacher   @relation("TeacherAttendance", fields: [teacherId], references: [id])
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model Post {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  content       String
  image         String?
  tags          String[]
  likes         Int       @default(0)
  authorId      String    @db.ObjectId
  author        User      @relation(fields: [authorId], references: [id])
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  comments      Comment[]
}

model Comment {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  content       String
  postId        String    @db.ObjectId
  post          Post      @relation(fields: [postId], references: [id])
  authorId      String    @db.ObjectId
  author        User      @relation(fields: [authorId], references: [id])
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model Achievement {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  title         String
  description   String
  date          DateTime
  validated     Boolean   @default(false)
  userId        String    @db.ObjectId
  user          User      @relation(fields: [userId], references: [id])
  category      String
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model AssignmentSubmission {
  id           String     @id @default(auto()) @map("_id") @db.ObjectId
  user         User       @relation(fields: [userId], references: [id])
  userId       String     @db.ObjectId
  assignment   Assignment @relation(fields: [assignmentId], references: [id])
  assignmentId String     @db.ObjectId
  submittedAt  DateTime   @default(now())
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
}

model TeacherSubject {
  id           String     @id @default(auto()) @map("_id") @db.ObjectId
  teacher      Teacher    @relation(fields: [teacherId], references: [id])
  teacherId    String     @db.ObjectId
  subject      Subject    @relation(fields: [subjectId], references: [id])
  subjectId    String     @db.ObjectId
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
}

enum Role {
  ADMIN
  TEACHER
  STUDENT
  PARENT
}

enum EnrollmentStatus {
  ACTIVE
  COMPLETED
  DROPPED
}

enum AttendanceStatus {
  PRESENT
  ABSENT
  LATE
}

enum AssignmentStatus {
  PENDING
  COMPLETED
  OVERDUE
}